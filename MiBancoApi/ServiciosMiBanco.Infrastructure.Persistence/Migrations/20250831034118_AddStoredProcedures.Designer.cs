// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiciosMiBanco.Infrastructure.Persistence;

#nullable disable

namespace ServiciosMiBanco.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ServiciosMiBancoContext))]
    [Migration("20250831034118_AddStoredProcedures")]
    partial class AddStoredProcedures
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServicioMiBanco.Domain.AggregatesModel.AccountAggregate.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("account_number")
                        .HasColumnType("bigint");

                    b.Property<long>("client_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("current_balance")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("daily_limit_amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("initial_balance")
                        .HasColumnType("decimal(12,2)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("client_id");

                    b.ToTable("account", "dbo");
                });

            modelBuilder.Entity("ServicioMiBanco.Domain.AggregatesModel.ClientAggregate.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("person_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("person_id")
                        .IsUnique();

                    b.ToTable("client", "dbo");
                });

            modelBuilder.Entity("ServicioMiBanco.Domain.AggregatesModel.MovementAggregate.Movement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("account_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("balance")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("transaction_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("account_id");

                    b.ToTable("movement", "dbo");
                });

            modelBuilder.Entity("ServicioMiBanco.Domain.AggregatesModel.PersonAggregate.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("identification")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("person", "dbo");
                });

            modelBuilder.Entity("ServicioMiBanco.Domain.AggregatesModel.AccountAggregate.Account", b =>
                {
                    b.HasOne("ServicioMiBanco.Domain.AggregatesModel.ClientAggregate.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ServicioMiBanco.Domain.AggregatesModel.ClientAggregate.Client", b =>
                {
                    b.HasOne("ServicioMiBanco.Domain.AggregatesModel.PersonAggregate.Person", "Person")
                        .WithOne("Client")
                        .HasForeignKey("ServicioMiBanco.Domain.AggregatesModel.ClientAggregate.Client", "person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ServicioMiBanco.Domain.AggregatesModel.MovementAggregate.Movement", b =>
                {
                    b.HasOne("ServicioMiBanco.Domain.AggregatesModel.AccountAggregate.Account", "account")
                        .WithMany("Movements")
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("ServicioMiBanco.Domain.AggregatesModel.AccountAggregate.Account", b =>
                {
                    b.Navigation("Movements");
                });

            modelBuilder.Entity("ServicioMiBanco.Domain.AggregatesModel.ClientAggregate.Client", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("ServicioMiBanco.Domain.AggregatesModel.PersonAggregate.Person", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
